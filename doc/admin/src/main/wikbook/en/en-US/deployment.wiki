
h1. Remove the sample applications {anchor:id=ADM.Clustering.How_to_remove_sample_application}

eXo Platform comes with two sample portals that showcase the capabilities of the product. However, once implementing your own extensions, you may not need the sample applications. In some cases, you usually want to remove them before deploying your system in production.

The following instructions are used in cases where the hsqldb embedded database configuration is used.

h2. Remove Acme website/Acme Social Intranet {anchor:id=ADM.Clustering.Remove_Acme/SocialIntranet}

Both Acme website and Acme Social Intranet are sample extensions that demonstrate the intranet you can implement with eXo Platform. 

To remove the Acme site/Acme Social Intranet, do as follows:

*1.* Stop the server using the command {{shutdown.sh}}.

*2.* Delete the following relevant files:

* For the Acme website: *acme-portal.war*, *exo.ecms.ext.acme.config.jar* and *gatein/data*.

* For the Acme Social Intranet: *office-portal.war*, *exo.platform.office.config.jar*, and *gatein/data*.

*3.* Restart the server.

h2. Remove the docs webapp/crash {anchor:id=ADM.Clustering.Remove_docs_webapp/crash}

The docs are bundled as a convenience to be easily browsable while your portal is started. For production deployments, you may not need them.
The docs webapp consists of the *docs.war* file located in {{tomcat/webapps}} and in {{jboss/server/default/deploy}}. In JBoss, it is actually a folder named *docs.war*.

Crash is a complementary tool for development and maintenance. As it opens telnet and ssh sockets, it is highly recommended that you remove the crash for your production deployments. The crash is covered in the *crash.war* file in {{tomcat/webapps}}.

To remove the docs webapp/crash, do as follows:

*1.* Stop the serve by using the command: {{shutdown.sh}}.

*2.* Delete the relevant file.

* For the docs webapp: The *docs.war* file.

* For the crash: The *crash.war* file.

*3.* Restart the server.

h1. Deploy a custom extension {anchor:id=ADM.Clustering.Deploy_custom_extension}

Extensions are packaged as the Java EE web applications and packaged as the normal .war files. To deploy the custom extension, you may do as for any other web-app.

In Tomcat, this ends up by copying the war archive to the {{webapps}} folder.

However, the GateIn extension mechanism imposes that the starter.war webapp starts after all extension wars.

This is the case for the sample applications bundled by default.

There are several ways to control the loading order of webapps in Tomcat. Please refer to [Tomcat's Deployer How To|http://tomcat.apache.org/tomcat-6.0-doc/deployer-howto.html#A_word_on_Contexts].

h1. Set up Apache Front-end {anchor:id=ADM.Clustering.Setup_Apache_Frontend}

It may be necessary to use the HTTP server as a front-end for Tomcat. For example, you may want to keep more than one application server on the same host, and/or you want to access these app servers with the separate DNS names, without adding a port to the URL.

There are two methods that allow you to "_glue_" Apache HTTP Daemon and Tomcat application server:

- via the HTTP protocol, using [proxy module|http://httpd.apache.org/docs/2.2/mod/mod_proxy.html].

- via the [Apache JServ Protocol|http://tomcat.apache.org/connectors-doc/ajp/ajpv13a.html], using [tomcat connector|http://tomcat.apache.org/connectors-doc/] or [HTTPD AJP proxy module|http://httpd.apache.org/docs/2.2/mod/mod_proxy_ajp.html].

h2. Base configuration for Apache {anchor:id=ADM.Clustering.Base_Configuration_for_Apache}

First, you need to configure a new virtual host in Apache HTTPD for the application server.
This is the simplest example of a virtual host:
{code}
        <VirtualHost *:80>
                ServerName      Enter your server DNS name here
                RedirectMatch permanent "^/?$" "/portal/"
        </VirtualHost>
{code}
You can find more information on the Apache HTTP daemon host [here|http://httpd.apache.org/docs/2.2/vhosts/].

h2. Connect via HTTP protocol (Apache mod{{{_}}}proxy) {anchor:id=ADM.Clustering.Connection_via_HTTP_protocol}

With the _glue_ method, it is necessary to configure the Apache HTTP daemon to work as the *reverse* proxy, which will redirect the client's requests to the app server's HTTP connector.

For this connection type, you need to include the *mod{{{_}}}proxy* module in the HTTP daemon configuratinon file.
This can be found in the *httpd.conf* file, which is usually located at *_/etc/httpd/conf/_*.  However, depending on your OS, this path may vary.
You will then need to add some directives to your virtual host configuration.
{code}
ProxyRequests   Off
ProxyPass	 "/" http://YOUR_AS_HOST:AS_HTTP_PORT/
ProxyPassReverse "/" http://YOUR_AS_HOST:AS_HTTP_PORT/
{code}

Details:

* YOUR_AS_HOST - host (IP or DNS name) is the location of your application server. If you run the HTTP daemon on the same host as your app server, you can change this to *localhost*.
* AS_HTTP_PORT - port is the location where your app server will listen to incoming requests. For Tomcat, this value is 8080 by default. You can find the value at *tomcat/conf/server.xml*.

In the above example, the HTTP daemon will work in the *reverse proxy* mode (ProxyRequests Off) and will redirect all requests to the tcp port 8080 on the localhost.
So, the configuration of a virtual host looks like the following:
{code}
        <VirtualHost *:80>
                ServerName      Enter your server DNS name here
                RedirectMatch	permanent "^/?$" "/portal/"
		ProxyRequests   Off
		ProxyPass	 "/" http://localhost:8080/
		ProxyPassReverse "/" http://localhost:8080/
        </VirtualHost>
{code}
For more detail about *mod{{{_}}}proxy*, refer to this [documentation|http://httpd.apache.org/docs/2.2/mod/mod_proxy.html].


h2. Connect via AJP protocol {anchor:id=ADM.Clustering.Connection_via_AJP_protocol}

As described above, the 'glue' method can be implemented via one of the following ways:

* *The first way:* Use the native Apache HTTP Daemon's [AJP proxy module|http://httpd.apache.org/docs/2.2/mod/mod_proxy_ajp.html].

* *The second way:* Use the native Apache Tomcat's [AJP connector|http://tomcat.apache.org/connectors-doc/ajp/ajpv13a.html].

With the first method, you only need the HTTP daemon and application server, but settings are limited.

With the second method, you can obtain more settings, but you will need to download and install additional modules for the HTTP Daemon that are not included in the default package.

h3. AJP proxy module {anchor:id=ADM.Clustering.AJP_proxy_module}

Make sure that *mod{{{_}}}proxy{{{_}}}ajp.so* is included in the list of loadable modules.
Add the following to your virtual host configuration setting:
{code}
ProxyPass / ajp://localhost:8009/
{code}

In this example, the app server is located on the same host as the Apache HTTP daemon, and accepts incoming connections on the port 8009 (the default setting for the Tomcat application server).
You can find the full list of virtual host configurations here:
{code}
        <VirtualHost *:80>
                ServerName      Enter your server DNS name here
                RedirectMatch	permanent "^/?$" "/portal/"
		ProxyRequests   Off
		ProxyPass	/ ajp://localhost:8009/
        </VirtualHost>
{code}

h3. Apache Tomcat's AJP connector {anchor:id=ADM.Clustering.Apache_Tomcat's_AJP_connector}

*1.* Download AJP connector module [here|http://apache.vc.ukrtel.net/tomcat/tomcat-connectors/jk/binaries/].

*2.* Move the downloaded *mod{{{_}}}jk.so* file into the HTTPD's module directory, for example: */etc/httpd/modules*. The directory may be different, depending on the OS.

*3.* Create the configuration file for the mod\_jk.conf module.
  {code}
	LoadModule    jk_module  modules/mod_jk.so
	<IfModule jk_module>
	  # ---- Where to find workers.properties
          JkWorkersFile   conf.d/workers.properties
	  # ---- Where to put jk logs
	  JkLogFile       logs/mod_jk.log
	  # ---- Set the jk log level [debug/error/info]
	  JkLogLevel    info
	  # ---- Select the timestamp log format
	  JkLogStampFormat "[%a %b %d %H:%M:%S %Y] "
	  JkRequestLogFormat "%w %R %T"
	  # ---- Send everything for context /examples to worker named worker1 (ajp13)
	  JkMountFileReload       "0"
	</IfModule>
  {code}

For more details, see [Tomcat documentation|http://tomcat.apache.org/connectors-doc/reference/apache.html].

*4.* Place the *mod{{{_}}}jk.conf* file into the directory where other configuration files for Apache HTTP daemon are located. For example, */etc/httpd/conf.d/*

*5.* Create the workers.properties file, which defines [AJP workers|http://tomcat.apache.org/connectors-doc/generic_howto/workers.html] for HTTP daemon.
  {code}
	worker.list=status, WORKER_NAME
	# Main status worker
	worker.stat.type=status
	worker.stat.read_only=true
	worker.stat.user=admin
	# Your AJP worker configuration
	worker.WORKER_NAME.type=ajp13
	worker.WORKER_NAME.host=localhost
	worker.WORKER_NAME.port=8109
	worker.WORKER_NAME.socket_timeout=120
	worker.WORKER_NAME.socket_keepalive=true
  {code}

{note}
In the example above, you can change *WORKER_NAME* to any value.
{note}

*6.* Put this file in the same directory as the mod{{{_}}}jk.conf file.

*7.* Update the virtual host configuration:

{code}
        <VirtualHost *:80>
                ServerName      Enter your server DNS name here
                RedirectMatch	permanent "^/?$" "/portal/"
		ProxyRequests   Off
                JkMount         /*	WORKER_NAME
        </VirtualHost>
{code}

h1. Configure the session timeout for the web server {anchor:id=ADM.Clustering.Configure_session_time-out_for_web_server}

The session timeout defines the validation period of a session.
In the portal environment, such as eXo Platform, it is highly recommended that all web applications have the same session timeout value:

* Tomcat
* JBoss
The session timeout is configurable individually for each web application in the *web.xml file:
{code}
<!-- ==================== Default Session Configuration ================= --> 
   <!-- You can set the default session timeout (in minutes) for all newly   --> 
   <!-- created sessions by modifying the value below.                       --> 

   <session-config> 
      <session-timeout>30</session-timeout> 
   </session-config>
{code}
h2. Server Tomcat {anchor:id=ADM.Clustering.Server_tomcat}

In the Tomcat bundle, this file is located at *{{{$TOMCAT_HOME/conf/web.xml}}}*. To configure the session timeout of Server Tomcat, do as follows:

*1.* Stop the server by the command: shutdown.sh.

*2.* Open the *web.xml* file.

*3.* Change the value of the session-timeout.

*4.* Save and then restart the server by the command {{gatein.sh}}.

h2. JBoss server {anchor:id=ADM.Clustering.Server_JBoss}

In the JBoss server, this file is located at *{{{$Jboss_home/server/default/deployers/jbossweb.deployer/web.xml}}}*. To configure the session-timeout of the JBoss server, do as follows:

*1.* Stop the server by using the shutdown.sh command.

*2.* Open the web.xml file.

*3.* Change the value of the session-timeout.

*4.* Save and restart the server.
