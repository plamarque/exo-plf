h1. How to backup Platform {anchor:id=ADM.Backup.How_to_backup_Platform}

eXo Platform instance backup involves backing up the databases and the filesystems for JCR index and value storage.
JCR backup should be done off-line. Allmost all data under {{gatein.data.dir}} should be backuped (find details below in "Plan backup" paragraph). 

{note}
Variable {{gatein.data.dir}} defined in eXo configuration _configuration.properties_ and by default points to {{$APPSEVER_HOME/gatein/data}} folder.

You can use this _tar_ command for file backup from your application server home dir: 
{screen}tar cvjf gatein-backup.tar.bz gatein/data{screen}
{note}

{note}
SQL database backup should use backup tools your RDMBS provides.
Example: [mysqldump|http://dev.mysql.com/doc/refman/5.1/en/mysqldump.html] on MySQL
{note}

h2. Plan backup {anchor:id=ADM.Backup.Plan_backup}

Start you backup strategy with a concept of a data repository. The backup data needs to be stored somehow and probably should be organized to a degree.
eXo Platform instance backup will produces set of files. What can be located on various storage medias (hard disk, tape, optical or solid storages, or even a special remote backup services can be used).  

Organization of the files in catalogs (folders) or use of different media is up to a concrete Plaform implementation. 

But it is highly recommended to apply a [Backup rotation scheme|http://en.wikipedia.org/wiki/Backup_rotation_scheme] to make the backup implementation effective and reliable.
Also always use your Operating System and Database software available backup solutions. It will simplify backup organization and help to avoid mistakes and data lost.

Plan Platform backup operations taking in account full stop of the Platform server(s). 
{warning}
In case of Platform cluster every node should be stopped before a backup will be perfoamed.
{warning}

Platform backup consists of following parts:
* JCR data backup
** JCR index files, pointed by configuration property {{gatein.jcr.index.data.dir}} 
** JCR value storage files, pointed by configuration property {{gatein.jcr.storage.data.dir}}
** JCR database backup, database specified in JDNI configuration of Application server with "exo-jcr_portal" name
* Organization service database backup, database specified in JDNI configuration of Application server with "exo-idm_portal" name
* Transaction service files backup, pointed by configuration property {{com.arjuna.ats.arjuna.objectstore.objectStoreDir}}

Be ready for Restore:
It's recommended to prepare tools (scripts etc) for restore at the backup planning stage. It will make particular restore operation quick and not .

{note}
Platform in this context means one Portal application, what is by default. But if your Platform instance runs several portals, each portal has own JCR, Organization and Transaction services. So, each portal should be backed up separately.
In this document a single-portal Platform backup described. It just can be repeated for each portal of your system. 
{note}

{note}
Only two kind of JCR files are important in backup sense: index and value storages. 
The {{gatein.jcr.data.dir}} folder (by default it's {{$gatein.data.dir/jcr}}) also contain _swap_ sub-folder.
The _swap_ folder used for temporary files in case when BLOBs stored in database (see JCR configuration guide) and has no meaning for backup.
{note}

Below given an example of Platform backup process organization. This example introduces basic principles and will help to create your backup implementation.

h3. Example backup planning {anchor:id=ADM.Backup.Example_backup_planing}

*Environment*
* Platform server runs on RedHat Linux server
* We have remote database server MySQL 5.1 _mysqlhost_
** JCR database _jcrdb_
** Organization service database _idmdb_
* Platform files are on network mounted storage _/mnt/netfs/platform_
** JCR value storage files in _/mnt/netfs/platform/jcr/values_
** JCR index files in _/mnt/netfs/platform/jcr/index_
** Transaction service store in _/mnt/netfs/platform/jta_
* Backup storage located on dedicated network mounted storage _/mnt/backupfs/my_plf_backup_

*Naming and Rotation*
It's a general case when backup organized in two cycles rotation: everyday backup files stored for a last week days, older data stored on weekly basis and we'll plan to keep three years history at all.

To implement this approach we'll run daily backups (at night time when our site isn't in use) and will store result files (database and JCR files) on network storage in following structure:
* _/my_plf_backup/2010/..._ - previous year archive
* _/my_plf_backup/current/_ - present year folder
* _/my_plf_backup/current/weeks_ - weeks archive for current year folder
* _/my_plf_backup/current/weeks/01_ - first week in current year folder
* _/my_plf_backup/current/weeks/02_ - second week in current year folder
* _/my_plf_backup/current/weeks/N_ - N week in current year folder

Files will have following format (using [ISO 8601|http://en.wikipedia.org/wiki/ISO_8601] date format):
* _yyyy-MM-dd_mysql_jcrdb.tar.gz_ - for JCR database backup
* _yyyy-MM-dd_mysql_idmdb.tar.gz_ - for Organization service database backup
* _yyyy-MM-dd_jcr_values.tar.gz_ - for JCR value storage files backup
* _yyyy-MM-dd_jcr_index.tar.gz_ - for JCR index files backup
* _yyyy-MM-dd_jta.tar.gz_ - for Transaction service files backup

For files backup we have a shell script running on the Platform server. This script does next steps:
* Stops the Platform server (ensure full stop by log sniffering)
* Runs database backup tool against _jcrdb_ and store result file in archive _/mnt/backupfs/my_plf_backup/current/yyyy-MM-dd_mysql_jcrdb.tar.gz_
* Runs database backup tool against _idmdb_ and store result file in archive _/mnt/backupfs/my_plf_backup/current/yyyy-MM-dd_mysql_idmdb.tar.gz_
* Copies JCR value files to archive _/mnt/backupfs/my_plf_backup/current/_yyyy-MM-dd_jcr_values.tar.gz_
* Copies JCR index files to archive _/mnt/backupfs/my_plf_backup/current/_yyyy-MM-dd_jcr_index.tar.gz_
* Copies Transaction service files to archive _/mnt/backupfs/my_plf_backup/current/_yyyy-MM-dd_jta.tar.gz_
* On each Sunday copies all 7 days old archive files to a week folder, e.g. _/my_plf_backup/current/weeks/02_ for backup at January 9, 2011. 
* Otherwise deletes files older of 7 days from _/my_plf_backup/current/_
* If it's [first week|http://en.wikipedia.org/wiki/ISO_8601#Week_dates} of a new year, the script creates a previosu year folder in _/my_plf_backup/_, e.g. _/my_plf_backup/2010_, and moves content of _/my_plf_backup/current/weeks_ there.
* Starts the Platform server
* Sends mail to Admin in case of error on any step.

Restore procedure planned as a manual operation.

{note}
Example script implementation outside of the scope of this guide.
{note}

h2. Perform backup {anchor:id=ADM.Backup.Perform_backup}

General steps should be perfoamed to backup eXo Platform:
* Stop Platform instance and ensure it is stopped fully, use shell command {{stop_eXo}} (find details in Installation chapter)
* Run backup procudure that performes backup of:
** JCR database
** Organization service database 
** JCR value storage files 
** JCR index files 
** Transaction service files
* Archive backup files to your backup store
* Start Platform instance

{note}
In case of Platform cluster, start it in proper order according the Clustering chapter steps.
{note}

h2. Perform restore {anchor:id=ADM.Backup.Perform_restore} 

Restore from backup can be used in several cases: failure, duplicating a site (e.g. for testing).
As for backup it's important to stop the platform fully before the restore.


TODO Intro and notes about all should be stopped
TODO Describe steps

h2. Thrid party tools {anchor:id=ADM.Backup.Thrid_party_tools} 

TODO mentione _rsync_ and [backula.org|http://www.bacula.org/] as tools for incremental backup.

