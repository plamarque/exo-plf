

h1. When should you consider clustering ?

Installing eXo platform in cluster mode should be considered in the following cases:

* Load Balancing : when a single single server node is not enough to handle the load
* High Availability : when you want to avoid a single point of failure by having redundant nodes 

These characteristics should be handled by the overall architecture of your system. Load Balancing is ypically achieved by a front server or device that distributes the request to the cluster nodes. Also, high availability on the data layer can be typically achieved using the native replication implemented by RDBMS.

In this chapter, we will cover only the changes needed by eXo to work in a cluster.



h1. Shared file system

In eXo Platform, the persistence mostly relies on JCR, which is a middle-man between the eXo applications (icluding the portal) and the database. Hence this component must be configured to work in cluster.

The embedded JCR server requires a the value storage to be on a file system shared among cluster nodes. We strongly advise the use of a mount point on a SAN.

{caution}The JCR index MUST NOT be shared. Each node should have a separate version of the index{caution} 


h1. Configuration setup


The switch to a cluster configuration is done in  {{configuration.properties}}

First, switch the JCR to cluster mode:

{code}
gatein.jcr.config.type=cluster
gatein.jcr.index.changefilterclass= org.exoplatform.services.jcr.impl.core.query.jbosscache.JBossCacheIndexChangesFilter
{code}

This will tell the JCR to enable automatic network replication and discovery between other cluster nodes.

Next, configure the path for the shared filesystem :

{code}
gatein.jcr.storage.data.dir=/PATH/TO/SHARED/FS/values
{code}

The path is shared, so all nodes will need read/write access to this path.

h2. advanced configuration

The cluster mode is preconfigured to work out of the box. It relies on the JBoss Cache configuration.

{code}
# JCR cache configuration
gatein.jcr.cache.config=classpath:/conf/jcr/jbosscache/${gatein.jcr.config.type}/config.xml

# JCR Locks configuration
gatein.jcr.lock.cache.config=classpath:/conf/jcr/jbosscache/${gatein.jcr.config.type}/lock-config.xml

# JCR Index configuration
gatein.jcr.index.cache.config=classpath:/conf/jcr/jbosscache/cluster/indexer-config.xml
gatein.jcr.jgroups.config=classpath:/conf/jcr/jbosscache/cluster/udp-mux.xml
{code}


{note}TODO : find and indicate the location of these files in jars. Give a link to the JGroups / JBoss Cache relevant doc{note}

h1. Startup option

You need to indicate the _cluster_ kernel profile to eXo Platform.
This can be done by editing {{gatein.sh}} like this: 
{code}
EXO_PROFILES="-Dexo.profiles=default,cluster"
{code}


h2. Starting and stoping the cluster

Nodes of the cluster will automatically try to join others at startup. Once they discover each other, they will synchronize their state.
During the synchronization the node is not ready to serve requests.

{note}How does an admin validate that teh cluster works properly ? Is there something noticeable on screen ?{note}

