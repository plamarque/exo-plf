


h1. Introduction

System configuration for eXo Platform is stored in a file named {{configuration.properties}}.

In the Tomcat bundle this file is located at {{$TOMCAT_HOME/gatein/conf/configuration.properties}}
h1. Database Configuration

eXo Platform relies on the application server for its database access, so the database must be configured as a datasource at the AS level. 
That datasource is obtained by accessing the enterprise naming context (ENC) through the Java Naming and Directory Interface (JNDI) service.

By default, eXo Platform defines two datasources: 
* {{exo-jcr}} - for the Java Content Repository (JCR).
* {{exo-idm}} - for the organizational model.

The tomcat bundle comes with the two datasources preconfigured as GlobalNamingContext Resources.
Please refer to Tomcat's [JNDI Resources How To|http://tomcat.apache.org/tomcat-6.0-doc/jndi-resources-howto.html] for more details on JNDI resources binding in Tomcat.

The configuration lives in 3 files that you will want to edit in order to change the database.

h3. configuration.properties 

{screen}$TOMCAT_HOME/gatein/conf/configuration.properties{screen}      

Indicate to eXo the name of the datasources.

{code}
# JNDI name of the datasource that will be used by eXo JCR
gatein.jcr.datasource.name=java:/comp/env/exojcr
...
# JNDI Name of the IDM datasource
gatein.idm.datasource.name=java:/comp/env/exo-idm
{code}               

eXo will automatically append the portal container name ("_portal" by default) to these values before it performs a JNDI lookup. 


h3. server.xml

{screen}$TOMCAT_HOME/conf/server.xml{screen}

Declare the binding of the datasources in the GlobalNaming context : 

{code:language=xml,title=test}
<!-- eXo JCR Datasource for portal -->
<Resource name="exo-jcr_portal" auth="Container" type="javax.sql.DataSource"
               maxActive="20" maxIdle="10" maxWait="10000"
               username="sa" password="" driverClassName="org.hsqldb.jdbcDriver"
               url="jdbc:hsqldb:file:../gatein/data/hsql/exo-jcr_portal"/>

<!-- eXo IDM Datasource for portal -->                
<Resource name="jdbc/exo-idm_portal" auth="Container" type="javax.sql.DataSource"
               maxActive="20" maxIdle="10" maxWait="10000"
               username="sa" password="" driverClassName="org.hsqldb.jdbcDriver"
               url="jdbc:hsqldb:file:../gatein/data/hsql/exo-idm_portal"/>   
{code}               
 
h3. starter.xml        
       
{screen}$TOMCAT_HOME/conf/Catalina/localhost/starter.xml{screen}

We declare resource links that make our datasources accessible to the starter webapp which is used when starting eXo.

{code:language=xml}
<ResourceLink name="exo-jcr_portal"
                global="exo-jcr_portal"
                type="javax.sql.DataSource"/>        
                
<ResourceLink name="exo-idm_portal"
                global="exo-idm_portal"
                type="javax.sql.DataSource"/>      
{code}                  
 


h1. FileSystem pathes


eXo needs read/write access to several pathes in the local filesystem.

{code}
gatein.data.dir=../gatein/data

# path for any JCR data 
gatein.jcr.data.dir=${gatein.data.dir}/jcr

# path for file data inserted in JCR
gatein.jcr.storage.data.dir=${gatein.jcr.data.dir}/values

# path for the jcr index
gatein.jcr.index.data.dir=${gatein.jcr.data.dir}/index
{code}


The following table explains what goes in what path. The {{temporary?}} column indicates if the data is temporary or persistent.
|| variable || content || temporary ||
|| {{gatein.data.dir}} | jta transactional data | yes |
|| {{gatein.jcr.data.dir}} | jcr swap data | yes |
|| {{gatein.jcr.storage.data.dir}} | binary value storage for jcr | no |
|| {{gatein.jcr.index.data.dir}} | lucene index for JCR | no |


Each variable can be defined as an absolute or relative path.
The default configuration combines them to obtain a compact tree : 
{code}
/gatein       # gatein.data.dir
  /data
    /hsql
    /jcr      # gatein.jcr.data.dir
      /index  # gatein.jcr.index.data.dir    
      /swap
      /values # gatein.jcr.storage.data.dir    
    /jta      
{code}

h1. Mail Server

eXo Platform requires an SMTP server in order to send emails such as notificaitons or password reminders.

{code}
gatein.email.smtp.username=
gatein.email.smtp.password=
gatein.email.smtp.host=smtp.gmail.com
gatein.email.smtp.port=465
gatein.email.smtp.starttls.enable=true
gatein.email.smtp.auth=true
gatein.email.smtp.socketFactory.port=465
gatein.email.smtp.socketFactory.class=javax.net.ssl.SSLSocketFactory
{code}


|| gatein.email.smtp.host || SMTP hostname |
|| gatein.email.smtp.port || SMTP port |
|| gatein.email.smtp.starttls.enable || true to enable secure (TLS) SMTP. See  RFC 3207 |
|| gatein.email.smtp.auth || true to enable SMTP authentication |
|| gatein.email.smtp.username || username to send for authentication |
|| gatein.email.smtp.password || password to send for authentication |
|| gatein.email.smtp.socketFactory.port || Specifies the port to connect to when using the specified socket factory	 |
|| gatein.email.smtp.socketFactory.class || his class will be used to create SMTP sockets. |

More details con be found in the [JavaMail API documentation|http://java.sun.com/products/javamail/javadocs/com/sun/mail/smtp/package-summary.html]. 


h1. WebDAV Cache Control

The embedded WebDAV server lets you control the cache-control http header that it transmits to clients by mimetype.
This is useful for fine-tuning your website.

The configuration property is: {{exo.webdav.cache-control}}
{screen}
exo.webdav.cache-control=text/*:max-age=3600;image/*:max-age=1800;*/*:no-cache;
{screen}

The property expects a comma-separated list of key=pair values, where keys are a list of mimetypes followed by the cache-control value to set.

h1. Chat Server

h2. XMPPMessenger

If you changed the hostname and port for the chat server, then you'll need to edit two properties:

{screen}
# IP or hostname for the eXo Chat XMPP server
exo.chat.server=127.0.0.1

# TCP port for where the eXo Chat server listens for XMPP calls
exo.chat.port=5222
{screen}

h2. Chat server configuration

The standalone Chat server is configured in the file {{$CHATSERVER/conf/openfire.xml}}.

Configuration is based on properties expressed in an XML syntax. For example, to set property {{prop.name.is.blah=value}}, you would write this xml snippet :
{code}
<prop><name><is><blah>value</blah></is></name></prop>
{code}


Openfire has an extensive list of configuration properties. Please read the list of all properties in [Openfire documentation | http://community.igniterealtime.org/docs/DOC-1061]

The chat server is an openfire server bundled with plugins and configurations that allow connectivity to eXo Platform.
The following properties are used to configure it.


|| Property || Description || Default value ||
|| *env* ||
|| serverbaseURL || base url for all URLs below | http://localhost:8080/ |
|| restContextName || name of the rest context | rest |
|| *provider* ||
|| authorizedUser.name || username to authenticate against the HTTP REST service | root  |
|| authorizedUser.password || password matching with provider.authorizeduser.name | password  |
|| *eXoAuthProvider* ||
|| authenticationURL || URL to authenticate users | /organization/authenticate/ |
|| authenticationMethod || HTTP method used to pass parameters | POST |
|| *eXoUserProvider* ||
|| findUsersURL || URL to find all users | /organization/xml/user/find-all/  |
|| findUsersMethod || HTTP method for user/find-all| GET  |
|| getUsersURL || URL to retrieve a range of users | /organization/xml/user/view-range/ |
|| getUsersMethod || HTTP method for user/view-range | GET  |
|| usersCountURL || URL to count users | /organization/xml/user/count/  |
|| usersCountMethod || HTTP method for user/count | GET |
|| userInfoURL || URL to get user info | /organization/xml/user/info/  |
|| userInfoMethod || HTTP method for user/info | GET  |
|| *eXoGroupProvider* ||
|| groupInfoURL || URL to get group info | /organization/xml/group/info/ |
|| groupInfoMethod || HTTP method for info | GET  |
|| getGroupsAllURL || URL to view all groups | /organization/xml/group/view-all/ |
|| getGroupsAllMethod || HTTP method for group/view-all | GET |
|| getGroupsRangeURL || URL to view a group range | /organization/xml/group/view-from-to/ |
|| getGroupsRangeMethod || HTTP method for group/view-from-to | GET |
|| getGroupsForUserURL || URL to get groups for a user | /organization/xml/group/groups-for-user/ |
|| getGroupsForUserMethod || HTTP method for groups-for-user | GET |
|| groupsCountURL || URL to count groups | organization/xml/group/count |
|| groupsCountMethod  || HTTP method for group/count | GET |

h3. Ports

In order to run properly the chat server needs several ports to be opened in the firewall.

|| Port || Type || Description ||
| 5222 (1) | client to server (xmpp) | The standard port for clients is to connect to the server. Connections may or may not be encrypted. You can update the security settings for this port with {{exo.chat.port}} property. |
| 9090 && 9091 | Admin Console (http) | The port used for respectively the unsecured and secured Openfire Admin Console access. |
| 3478 & 3479 | STUN service | The port used for the service that ensures connectivity between entities when behind a NAT. |


h1. Logging

Logging in eXo Platform is controlled by the [Java Logging API|http://download-llnw.oracle.com/javase/1.5.0/docs/guide/logging/index.html].

By default, logging is configured to:
* log errors and warnings on the console
* log info level statements in */gatein/logs/gatein-YYYY-MM-DD.log*

In Tomcat, the logging is configured via the conf/logging.properties file. Please refer to [Tomcat's Logging Documentation|http://tomcat.apache.org/tomcat-6.0-doc/logging.html] for more information on how to adjust this file to your needs.


h1. JCR

A set of properties control the behaviour of the JCR.

{code}
# Type of JCR configuration to use. Possible values are : 
# local : local JBC configuration
# cluster : cluster JBC configuration
gatein.jcr.config.type=local

# This is the filter used to notify changes in the jcr index
# in cluster mode, use org.exoplatform.services.jcr.impl.core.query.jbosscache.JBossCacheIndexChangesFilter
gatein.jcr.index.changefilterclass=org.exoplatform.services.jcr.impl.core.query.DefaultChangesFilter

# JCR cache configuration
gatein.jcr.cache.config=classpath:/conf/jcr/jbosscache/${gatein.jcr.config.type}/config.xml

# JCR Locks configuration
gatein.jcr.lock.cache.config=classpath:/conf/jcr/jbosscache/${gatein.jcr.config.type}/lock-config.xml

# JCR Index configuration
gatein.jcr.index.cache.config=classpath:/conf/jcr/jbosscache/cluster/indexer-config.xml
gatein.jcr.jgroups.config=classpath:/conf/jcr/jbosscache/cluster/udp-mux.xml

{code}

|| gatein.jcr.config.type || use {{cluster}} is you want to use eXo Platform in cluster mode. Otherwise leave {{local}} ||
|| gatein.jcr.index.changefilterclass || in cluster mode change it to {{org.exoplatform.services.jcr.impl.core.query.jbosscache.JBossCacheIndexChangesFilter}} |
|| gatein.jcr.cache.config  |JBoss Cache configuration for the JCR locks |
|| gatein.jcr.index.cache.config | JBoss Cache Configuraiton for the JCR index |
|| gatein.jcr.jgroups.config | JGroups configuration to use for cluster mode |

Please refer to the JCR reference guide for the details of configuring these files.

