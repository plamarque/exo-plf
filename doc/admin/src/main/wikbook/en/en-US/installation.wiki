eXo Platform is packaged as a deployable enterprise archive defined by the Java EE specification, and as a configuration directory.

h1. Install the Tomcat bundle {anchor:id=ADM.Installation.Install_Tomcat_Bundle}

The easiest way to install eXo Platform is to take the default bundle.
This is a ready-made package on top of the Tomcat 6 application server, so you simply need to copy the {{bin/tomcat6-bundle/}} directory to your server.

*1.* Start up the server.

eXo Platform leverages the application server on which it is deployed. This means that you only need to start and stop your application with the default commands.

* On Linux and OS X:   {screen}$TOMCAT_HOME/start_eXo.sh{screen}

* On Windows:          {screen}%TOMCAT_HOME%\\start_eXo.bat{screen}

The server has started when you see the following message in your log/console:

{screen}
INFO: Server startup in 353590 ms
{screen}

*2.* Shut down the server.

* On Linux and OS X: {screen}$TOMCAT_HOME/stop_eXo.sh{screen}

* On Windows:        {screen}%TOMCAT_HOME%\\stop_eXo.bat {screen}

If you receive the message when you try to stop Tomcat as below, you must stop Tomcat by pressing Ctrl+C or by killing with the {noformat}-9{noformat} command. To perform the *kill* action automatically, you can type {{{stop_eXo.sh -force}}} that is only available on Linux and OS X systems.

{screen}Tomcat did not stop in time. The PID file was not removed.{screen}

The server has been stopped successfully when you see the following message in your log/console:

{screen}
INFO: Stopping Coyote HTTP/1.1 on http-8080
{screen}


*3.* Start up eXo Platform by using one of the following built-in scripts.

eXo Platform comes with several built-in startup scripts:

* Linux & OS X: {{start{{{_}}}eXo.sh}}.

* Windows: {{start{{{_}}}eXo.bat}}.

* Linux and OS X in the developer mode: {{bin/gatein-dev.sh}}.

* Windows in the developer mode: {{bin/gatein-dev.bat}}.

In the normal mode, the {{start{{{_}}}eXo}} scripts launch eXo Platform with the following JVM options:

{screen}
-Xms256m 
-Xmx1024m 
-XX:MaxPermSize=256m 
-Djava.security.auth.login.config=../conf/jaas.conf  
-Dexo.conf.dir.name=gatein/conf 
-Dexo.profiles=default
{screen}

Details:

| {{-Xms}} | Minimal Heap Size (defaults to 256 MB). |
| {{-Xmx}} | Maximal Heap Size (defaults to 1 GB). |
| {{-Djava.security.auth.login.config | Path to the JAAS security file where the security domains and JAAS authentication modules are declared. |
| {{-Dexo.conf.dir.name}} | Path where eXo Platform will start looking at {{configuration.properties}} and {{configuration.xml}}. |
| {{-Dexo.profiles}} | List of comma-separated profiles of eXo Plaform to activate. |


In the developer mode, the {{gatein-dev}} scripts launch eXo Platform in the developer mode with a few JVM options.

{screen}
-Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n 
-Dcom.sun.management.jmxremote 
-Dorg.exoplatform.container.configuration.debug 
-Dexo.product.developing=true 
{screen}

Details:

| {noformat}-Dcom.sun.management.jmxremote{noformat} | Activate the JMX remoting. |
| {noformat}-Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n{noformat} | Enable the remote debugging. |
| {noformat}-Dorg.exoplatform.container.configuration.debug{noformat} | The container will log to the console which the .xml file loads. |
| {noformat}-Dexo.product.developing=true{noformat} | Deactivate Javascript and CSS merging for debugging more easily. |


Now, you can start and run the eXo Platform demo, but you will need to adjust these values for a production setup.

h1. Install JBoss EARs {anchor:id=ADM.Installation.Install_JBoss_EARS}

eXo Platform provides EARs packages to deploy in your existing JBoss application server. They are located in the {{bin/jboss5-eap-ears/}} folder.

To install eXo Platform on JBoss, follow these steps:

*1. Copy the following files to {{jboss-root/server/default/deploy}}.

- gatein-ds.xml
- gatein.ear
- starter-gatein.ear
- acme-website.ear
- office-portal.ear
- platform-extension.ear
- exo-collaboration.ear
- exo-social-extension.ear
- gatein-exo-ks.ear
- gatein-wcm-extension-plf.ear
- gatein-workflow-extension-plf.ear

*2.* Create a folder: {{jboss-root/server/default/conf/gatein}} and then copy these files to this folder.

- configuration.properties

- configuration.xml

*3.* Copy this file to {{jboss-root/server/default/conf/gatein/gadgets}}.

- oauthkey.pem

*4.* Configure JVM parameters.

On *Linux*, add these lines to the end of {{jboss-root/bin/run.conf}}:

{code}
# Platform environment variables
EXO_PROFILES="-Dexo.profiles=default"
EXO_OPTS="-Dexo.product.developing=false -Dexo.conf.dir.name=gatein -Dgatein.data.dir=../gatein"
REMOTE_DEBUG="-Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n -Dcom.sun.management.jmxremote -Dorg.exoplatform.container.configuration.debug"
EXO_XML="-Djavax.xml.stream.XMLOutputFactory=com.sun.xml.stream.ZephyrWriterFactory -Djavax.xml.stream.XMLInputFactory=com.sun.xml.stream.ZephyrParserFactory -Djavax.xml.stream.XMLEventFactory=com.sun.xml.stream.events.ZephyrEventFactory"
JAVA_OPTS="$JAVA_OPTS $EXO_OPTS $EXO_PROFILES $EXO_XML"
{code}

* On *Windows*, add these lines to the end of {{jboss-root/bin/run.conf.bat}}:

{code}
rem # Platform environment variables
set "EXO_PROFILES=-Dexo.profiles=default"
set "EXO_OPTS=-Dexo.product.developing=false -Dexo.conf.dir.name=gatein -Dgatein.data.dir=../gatein"
set "REMOTE_DEBUG=-Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n -Dcom.sun.management.jmxremote -Dorg.exoplatform.container.configuration.debug"
set "EXO_XML=-Djavax.xml.stream.XMLOutputFactory=com.sun.xml.stream.ZephyrWriterFactory -Djavax.xml.stream.XMLInputFactory=com.sun.xml.stream.ZephyrParserFactory -Djavax.xml.stream.XMLEventFactory=com.sun.xml.stream.events.ZephyrEventFactory"
set "JAVA_OPTS=%JAVA_OPTS% %EXO_OPTS% %EXO_PROFILES% %EXO_XML%"
{code}

*Adapt to your needs:*
* To use another implementation of SAX, change the class names in the EXO_XML variable, for example: com.sun.xml.internal.stream.XMLOutputFactoryImpl.
* To debug the application, simply add $REMOTE_DEBUG to the JAVA_OPTS variable.

*5.* Add the eXo Platform logging categories to jboss-root/server/default/conf/jboss-log4j.xml.

{code:xml}
<!-- Limit the JSR170 categories -->
<category name="exo.jcr">
  <priority value="INFO" />
</category>
<!-- Limit the JSR-168 and JSR-286 categories -->
<category name="org.exoplatform.services">
  <priority value="INFO" />
</category>
{code}

*6.* Start up the server.

* On Linux and OS X:   {screen}$JBOSS_HOME/bin/run.sh{screen}

* On Windows:          {screen}%JBOSS_HOME%\\bin\\run.bat{screen}

The server is started successfully when you see the following message in your log/console:

{screen}
INFO [org.jboss.bootstrap.microcontainer.ServerImpl] (main) JBoss (Microcontainer) [5.0.1 (build: ...)] Started in 3m:29s:259ms
{screen}

*7.* Shut down the server.

* On Linux and OS X: {screen}$JBOSS_HOME/bin/shutdown.sh{screen}

* On Windows: {screen}%JBOSS_HOME%\\bin\\shutdown.bat {screen}

The server has been stopped successfully when you see the following message in your log/console:

{screen}
INFO  [org.jboss.bootstrap.microcontainer.ServerImpl] (JBoss Shutdown Hook) Shutdown complete
{screen}


h1. Profiles of eXo Platform {anchor:id=ADM.Installation.eXo_profiles}


eXo Platform comes with different runtime profiles, enabling you to customize what modules you want to enable/disable in each eXo Platform instance.

The {{start{{{_}}}eXo}} commands accept a comma-separated list of profiles. The following profiles are supported:

|| Profile || Description ||
| {{collaboration}} | Enable the eXo Collaboration module. |
| {{knowledge}} | Enable the eXo Knowledge module.|
| {{social}} | Enable the eXo Social module. |
| {{workflow}} | Enable the workflow add-ons within the eXo Content module.|
| {{webos}} | Enable the eXo WebOS module.|

Additionally, you can use these composite profiles: 
|| Profile || Description ||
| {{minimal}} | Contain GateIn + eXo Content. |
| {{default}} | Contain all exceptional workflows (GateIn, eXo IDE, eXo Collaboration, eXo Social, eXo Knowledge).|
| {{all}} | All available modules. |

For example:

* ./start_eXo.sh default,workflow: Start all modules, including workflow.
* ./start_eXo.sh default,webos: Start all modules, including webos.
* ./start_eXo.sh collaboration,knowledge: Start eXo Platform with GateIn, eXo Content, eXo Collaboration and eXo Knowledge enabled.
* ./start_eXo.sh minimal,social: Start with eXo Social, GateIn and eXo Content.
