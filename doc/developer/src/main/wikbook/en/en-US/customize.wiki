When working with eXo, it is important to not modify the source code. This will ensure compatibility with future upgrades, and will simplify support.

To customize your portal, you need to create an extension project by providing your own artifacts as a set of wars/jars/ears.


h1. Create your extension project

A custom extension contains two mandatory items:
* extension webapp: contains resources and kernel configurations.
* extension activator jar: identifies your webapp as a dependency of the portal container.

A sample extension package is provided here: [http://anonsvn.jboss.org/repos/gatein/portal/trunk/examples/extension/]


Once you have modified the sample extension to build your own, use "maven clean install" to create the archive files.

To deploy your extension in Tomcat, follow these steps:
* Add the file {{sample-ext.war}} from {{sample/extension/war/target/}} to the {{tomcat/webapps}} directory.
* Add the folder {{starter}} from {{starter/war/target/}} to the {{tomcat/webapps}} directory.
* Rename the directory (unzipped folder) {{starter}} to {{starter.war}}.
{note}
This will only work if the starter.war is the last war file to be loaded, so you may need to rename it if your war files are loaded in alphabetical order.
{note}
* Add the jar file {{exo.portal.sample.extension.config-X.Y.Z.jar}} from {{sample/extension/config/target/}} to the {{tomcat/lib}} directory.
* Add the jar file {{exo.portal.sample.extension.jar-X.Y.Z.jar}} from {{sample/extension/jar/target/}} to the {{tomcat/lib}} directory.


For JBoss deployment and more details, refer to the Reference Guide.


h1. Portal, pages and menus structure

You can create as many pages as you want within a single portal. Permissions can be defined to make them visible only to specific groups and/or users. This chapter describes how to define this structure.

h2. Page layout

The configuration of the "classic" portal can be found in the directory {{/src/main/webapp/WEB-INF/conf/sample-ext/portal/portal/classic}} of your extension webapp.

* *Portal:*

The {{portal.xml}} file describes the layout and portlets common to all the pages of the portal.

{code}<?xml version="1.0" encoding="ISO-8859-1"?>
<portal-config
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.gatein.org/xml/ns/gatein_objects_1_0 http://www.gatein.org/xml/ns/gatein_objects_1_0"
    xmlns="http://www.gatein.org/xml/ns/gatein_objects_1_0">
  <portal-name>classic</portal-name>
  <locale>en</locale>
  <access-permissions>Everyone</access-permissions>
  <edit-permission>*:/platform/administrators</edit-permission>
  <properties>
    <entry key="sessionAlive">onDemand</entry>
  </properties>
    
     <portal-layout>
      <portlet-application>
      <portlet>
        <application-ref>web</application-ref>
        <portlet-ref>BannerPortlet</portlet-ref>
        <preferences>
          <preference>
            <name>template</name>
            <value>par:/groovy/groovy/webui/component/UIBannerPortlet.gtmpl</value>
            <read-only>false</read-only>
          </preference>
        </preferences>
      </portlet>
      <access-permissions>Everyone</access-permissions>
        <show-info-bar>false</show-info-bar>
      </portlet-application>

      <portlet-application>
      <portlet>
       ...
      </portlet>
      </portlet-application>
        
      <portlet-application>
      <portlet>
        ...
      </portlet>
      </portlet-application>
      
      <page-body> </page-body>
      
     <portlet-application>
       <portlet>
         ...
       </portlet>
     </portlet-application>
  </portal-layout>
</portal-config>
{code}


As you can see, each portlet can be configured with a set of preferences, which will be further detailed.

* *Pages:*

The {{pages.xml}} file is used to describe the content of the pages of your portal. In other words, what will be inside the <page-body> tag of the {{portal.xml}} file above.
Here is an example of the classic portal pages.xml.

{code}
<page>
    <name>homepage</name>
    <title>Home Page</title>
    <access-permissions>Everyone</access-permissions>
    <edit-permission>*:/platform/administrators</edit-permission>
    <container id="ClassicBody" template="system:/groovy/portal/webui/container/UITableColumnContainer.gtmpl">
      <access-permissions>Everyone</access-permissions>
      <container id="ClassicLeft" template="system:/groovy/portal/webui/container/UIContainer.gtmpl">
        <access-permissions>Everyone</access-permissions>
        <portlet-application>
          <portlet>
            <application-ref>presentation</application-ref>
            <portlet-ref>SingleContentViewer</portlet-ref>
            <preferences>
              <preference>
                <name>repository</name>
                <value>repository</value>
                <read-only>false</read-only>
              </preference>
              ...
              <preference>
                <name>ShowTitle</name>
                <value>false</value>
                <read-only>false</read-only>
              </preference>
            </preferences>
          </portlet>
          <title>Introduce</title>
          <access-permissions>Everyone</access-permissions>
          <show-info-bar>false</show-info-bar>
          <show-application-state>false</show-application-state>
          <show-application-mode>false</show-application-mode>
        </portlet-application>
      </container>
    </container>
  </page>
{code}

{note}
This section is meant to help you organize the layout and structure of your portal. Review the "Working with applications" chapter to learn more about portlet configuration within the pages.xml file.
{note}

* *Navigation:*

The {{navigation.xml}} is used to associate the links in your navigation (called page-node) with your portal pages.

If the pattern #{} is used then the label of the link will be loaded from the portal resource bundle (link to the [ref guide about resource bundles|http://wiki.exoplatform.org/xwiki/bin/view/Portal/Internationalization+Configuration]


{code}
<?xml version="1.0" encoding="UTF-8"?>
<node-navigation>
<owner-type>portal</owner-type>
<owner-id>classic</owner-id>
<priority>1</priority>
<page-nodes>
<node>
<uri>home</uri>
<name>home</name>
<label>#{portal.classic.home}</label>
<page-reference>portal::classic::homepage</page-reference>
</node>
<node>
<uri>webexplorer</uri>
<name>webexplorer</name>
<label>#{portal.classic.webexplorer}</label>
<page-reference>portal::classic::webexplorer</page-reference>
</node>
</page-nodes>
</node-navigation>
{code}


This navigation tree can have multiple views inside portliest, such as breadcrumbs that render the current view node, the site map or the menu portlets.

{note}
For top nodes, the URI and the navigation node name must have the same value. For the other nodes, the URI is composed like <uri>contentmanagement/fileexplorer</uri> where 'contentmanagement' is the name of the parent node and 'fileexplorer' the name of the node (<name>fileexplorer</name>).
{note}

h2. Visibility of pages

You can easily set the visibility of select pages and navigation to certain groups and users. Simply create {{pages.xml}} and {{navigation.xml}} files in folders named after the group and user to which you want to give permission:
* sample-ext/portal/group/group-name/your files
* sample-ext/portal/user/username/your files

h1. Customize your portal

One of the first steps in any web project is to integrate a graphic chart. This can be done entirely within your extension, by customizing the portal configuration.


In order to add a JavaScript library (for example JQuery), follow these steps:
* Create the following folder, if it does not already exist: {{/war/src/main/webapp/WEB-INF/conf/script/groovy}}
* Within this folder, create a {{JavascriptScript.groovy}} file
* Add the following line to the groovy file

{code}
JavascriptService.addJavascript("Name_Of_Library", "/path_to/java_script/JavaScript_Lib.js", ServletContext);
{code}

For example:
{code}
JavascriptService.addJavascript("eXo.myproject.Jquery", "/javascript/eXo/myproject/jquery.js", ServletContext);
{code}

h1. Add/remove languages
All languages are put in the _myextension.war/WEB-INF/conf/common/locales-config.xml_ directory. Information of each language consists of key, output-encoding, input-encoding, description and orientation. Different languages will be defined in corresponding _resource bundle_ files with keys specified in the _locale-config.xml_ file.

All languages defined in the _locale-config.xml_ file will be listed in the *Interface Language Settings*. 

h2. Add a new language
To add a new language, you need to add the desired language node in the _locale-config.xml_ file. Next, you will create a new _resource bundle_ file containing the suffix name as key of the added node.

For example, to add Italian, do as follows:

*Step 1:* Add the following node to the _locale-config.xml_ file. 
{code:xml}
<locale-config>
    <locale>it</locale>
    <output-encoding>UTF-8</output-encoding>
    <input-encoding>UTF-8</input-encoding>
    <description>Default configuration for Italian locale</description>
</locale-config>
{code}

*Step 2:* Create a new _resource bundle_ as *{{{webui_it.properties}}}* in the _myextension.war/WEB-INF/classes/locale/portal_ folder. 

{note}
This step is necessary because the Resource Bundle Service of the portal will find keys and values in the _resource bundle_ of each corresponding language. 
{note}

*Step 3:* Restart the server.

To check if the added language takes effect, simply click the *Change Language* button on the top right corner of the portal. In the *Interface Language Setting* window, you will see Italian as shown:

!example_addItalian.png!

*Illustration 1: Italian display on Interface Language Setting*

h2. Remove languages
To remove an existing language, you need to delete the relevant language node in the _locale-config.xml_ file and all files containing the suffix name as the key of language you want.

For example, to remove French, do as follows:

*Step 1:* Find and remove the following node from the _locale-config.xml_ file.
{code:xml}
<locale-config>
    <locale>fr</locale>
    <output-encoding>UTF-8</output-encoding>
    <input-encoding>UTF-8</input-encoding>
    <description>Default configuration for france locale</description>
</locale-config>
{code}

*Step 2:* Continue removing all _resource bundle_ files containing the suffix name as *fr* in all folders.

{note}
It is recommended to do this step to delete unnecessary data in the application.
{note}
 
*Step 3:* Restart the server.

To check if the removed language takes effect, simply click the *Change Language* button on the top right corner of the portal. In the Interface Language Setting window, French as shown in the *Illustration 1* has not existed on the *Interface Language Setting* window. 

!example_removeFrench.png!

*Illustration 2: Interface Language Setting without French*

h1. How to create custom look and feel
{include:document="customize/How_to_create_custom_look_and_feel.wiki"}
